/* Generated By:JavaCC: Do not edit this line. DefinationConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DefinationConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IDENTIFIERS = 5;
  /** RegularExpression Id. */
  int NUMBER = 6;
  /** RegularExpression Id. */
  int PLUS = 7;
  /** RegularExpression Id. */
  int SEMICOLON = 8;
  /** RegularExpression Id. */
  int SUBTRACT = 9;
  /** RegularExpression Id. */
  int MULTIPLY = 10;
  /** RegularExpression Id. */
  int DIVIDE = 11;
  /** RegularExpression Id. */
  int EQUAL = 12;
  /** RegularExpression Id. */
  int GRTHEN = 13;
  /** RegularExpression Id. */
  int NOT = 14;
  /** RegularExpression Id. */
  int LEFTBRACE = 15;
  /** RegularExpression Id. */
  int LEFTBRACKET = 16;
  /** RegularExpression Id. */
  int RIGHTBRACKET = 17;
  /** RegularExpression Id. */
  int RIGHTBRACE = 18;
  /** RegularExpression Id. */
  int PERIOD = 19;
  /** RegularExpression Id. */
  int COMMA = 20;
  /** RegularExpression Id. */
  int GTE = 21;
  /** RegularExpression Id. */
  int AND = 22;
  /** RegularExpression Id. */
  int OR = 23;
  /** RegularExpression Id. */
  int LPAREN = 24;
  /** RegularExpression Id. */
  int RPAREN = 25;
  /** RegularExpression Id. */
  int NOTEQUAL = 26;
  /** RegularExpression Id. */
  int LTE = 27;
  /** RegularExpression Id. */
  int LTHEN = 28;
  /** RegularExpression Id. */
  int GETS = 29;
  /** RegularExpression Id. */
  int IFF = 30;
  /** RegularExpression Id. */
  int ELSE = 31;
  /** RegularExpression Id. */
  int ABSTRACT = 32;
  /** RegularExpression Id. */
  int SWITCH = 33;
  /** RegularExpression Id. */
  int SUPER = 34;
  /** RegularExpression Id. */
  int NATIVE = 35;
  /** RegularExpression Id. */
  int NEW = 36;
  /** RegularExpression Id. */
  int CONST = 37;
  /** RegularExpression Id. */
  int WHILE = 38;
  /** RegularExpression Id. */
  int FOR = 39;
  /** RegularExpression Id. */
  int FLOAT = 40;
  /** RegularExpression Id. */
  int CLASS = 41;
  /** RegularExpression Id. */
  int VOLITILE = 42;
  /** RegularExpression Id. */
  int STRICTFP = 43;
  /** RegularExpression Id. */
  int LONG = 44;
  /** RegularExpression Id. */
  int FINALLY = 45;
  /** RegularExpression Id. */
  int CHAR = 46;
  /** RegularExpression Id. */
  int VOID = 47;
  /** RegularExpression Id. */
  int STATIC = 48;
  /** RegularExpression Id. */
  int FINAL = 49;
  /** RegularExpression Id. */
  int CATCH = 50;
  /** RegularExpression Id. */
  int TRY = 51;
  /** RegularExpression Id. */
  int SHORT = 52;
  /** RegularExpression Id. */
  int INT = 53;
  /** RegularExpression Id. */
  int EXTENDS = 54;
  /** RegularExpression Id. */
  int CASE = 55;
  /** RegularExpression Id. */
  int TRANSIENT = 56;
  /** RegularExpression Id. */
  int RETURN = 57;
  /** RegularExpression Id. */
  int INSTANCEOF = 58;
  /** RegularExpression Id. */
  int BYTE = 59;
  /** RegularExpression Id. */
  int DOUBLE = 60;
  /** RegularExpression Id. */
  int PUBLIC = 61;
  /** RegularExpression Id. */
  int IMPORT = 62;
  /** RegularExpression Id. */
  int BREAK = 63;
  /** RegularExpression Id. */
  int PROTECTED = 64;
  /** RegularExpression Id. */
  int IMPLEMENTS = 65;
  /** RegularExpression Id. */
  int DO = 66;
  /** RegularExpression Id. */
  int BOOLEAN = 67;
  /** RegularExpression Id. */
  int THIS = 68;
  /** RegularExpression Id. */
  int PRIVATE = 69;
  /** RegularExpression Id. */
  int DEFAULTE = 70;
  /** RegularExpression Id. */
  int ASSERT = 71;
  /** RegularExpression Id. */
  int GOTO = 72;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 73;
  /** RegularExpression Id. */
  int PACKAGE = 74;
  /** RegularExpression Id. */
  int CONTINUE = 75;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\t\"",
    "\"\\r\"",
    "<IDENTIFIERS>",
    "<NUMBER>",
    "\"+\"",
    "\";\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"==\"",
    "\">\"",
    "\"!\"",
    "\"{\"",
    "\"[\"",
    "\"]\"",
    "\"}\"",
    "\".\"",
    "\",\"",
    "\">=\"",
    "\"&&\"",
    "\"||\"",
    "\"(\"",
    "\")\"",
    "\"!=\"",
    "\"<=\"",
    "\"<\"",
    "\"=\"",
    "\"iffi\"",
    "\"else\"",
    "\"abstract\"",
    "\"switch\"",
    "\"super \"",
    "\"native \"",
    "\"new \"",
    "\"const \"",
    "\"while\"",
    "\"for \"",
    "\"float \"",
    "\"class \"",
    "\"volatile\"",
    "\"strictfp \"",
    "\"long \"",
    "\"finally \"",
    "\"char \"",
    "\"void\"",
    "\"static \"",
    "\"final \"",
    "\"catch \"",
    "\"try\"",
    "\"short \"",
    "\"int \"",
    "\" extends \"",
    "\"case\"",
    "\"transient\"",
    "\"return \"",
    "\"instanceof \"",
    "\"byte \"",
    "\"double \"",
    "\"public \"",
    "\"import\"",
    "\"break \"",
    "\"protected \"",
    "\"implements \"",
    "\"do\"",
    "\"boolean\"",
    "\"this\"",
    "\"private \"",
    "\"default\"",
    "\"assert\"",
    "\"goto\"",
    "\"synchronized\"",
    "\"package\"",
    "\"continue \"",
  };

}
