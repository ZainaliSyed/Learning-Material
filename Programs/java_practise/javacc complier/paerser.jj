options {
  IGNORE_CASE = true;
}
PARSER_BEGIN(ExampleParser)

  public class ExampleParser {
    //Parser execution
    public static void main ( String args [ ] ) {

      //Parser initialization
      ExampleParser parser;

      if(args.length == 0){
        System.out.println ("ExampleParser: Reading input ...");
        parser = new ExampleParser(System.in);
      }
      else if(args.length == 1){
        System.out.println ("ExampleParser: Reading the file " + args[0] + " ..." );
        try {
          parser = new ExampleParser(new java.io.FileInputStream(args[0]));
        }
        catch(java.io.FileNotFoundException e) {
          System.out.println ("ExampleParser: The file " + args[0] + " was not found.");
          return;
        }
      }
      else {
        System.out.println ("ExampleParser:  You must use one of the following:");
        System.out.println ("         java ExampleParser < file");
        System.out.println ("Or");
        System.out.println ("         java ExampleParser file");
        return ;
      }
      try {
        compilador.Start();
        System.out.println ("ExampleParser: The input was readed sucessfully.");
      }
      catch(ParseException e){
        System.out.println ("ExampleParser: There was an error during the parse.");
        System.out.println (e.getMessage());
      }
      catch(TokenMgrError e){
        System.out.println ("ExampleParser: There was an error.");
        System.out.println (e.getMessage());
      }
    }
  }
PARSER_END(ExampleParser)

//STRUCTURES AND CHARACTERS TO SCAPE
SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"rem" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}
//STATIC TOKENS
TOKEN : {
 <INTEGER_CONSTANT: (<DIGIT>)+>
|  <LOGIC_CONSTANT: "true" | "false" | "-1">
|  <STRING_CONSTANT: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n")))* "\"">
|  <#DIGIT: ["0"-"9"]>
}
//RESERVED WORDS
TOKEN : {
 <NOT: "not">
|  <IF: "if">
|  <END: "end">
|  <SUB: "sub">
|  <LET: "let">
|  <CALL: "call">
|  <THEN: "then">
|  <CASE: "case">
|  <ELSE: "else">
|  <INPUT: "input">
|  <PRINT: "print">
|  <SELECT: "select">
|  <STATIC: "static">
}
//IDENTIFIER TOKEN
TOKEN : {
 <IDENTIFIER: <LETTER>(<LETTER>|<DIGIT>)*(["$"])?>
|  <#LETTER: (["a"-"z","A"-"Z"])>
}

//MAIN UNIT
void Start () : {}
{
  (
    INTEGER_CONSTANT | STRING_CONSTANT | LOGIC_CONSTANT |
    NOT | IF | END | SUB | LET | CALL | THEN | CASE | ELSE | INPUT | PRINT | SELECT | STATIC |
    IDENTIFIER
  )*
  <EOF>
}